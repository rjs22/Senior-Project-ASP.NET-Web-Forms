#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SrProj_RSweit
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SrProj")]
	public partial class DBContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertoptiongroup(optiongroup instance);
    partial void Updateoptiongroup(optiongroup instance);
    partial void Deleteoptiongroup(optiongroup instance);
    partial void Insertoption(option instance);
    partial void Updateoption(option instance);
    partial void Deleteoption(option instance);
    partial void Insertproductcategory(productcategory instance);
    partial void Updateproductcategory(productcategory instance);
    partial void Deleteproductcategory(productcategory instance);
    partial void Insertproductoption(productoption instance);
    partial void Updateproductoption(productoption instance);
    partial void Deleteproductoption(productoption instance);
    partial void Insertproduct(product instance);
    partial void Updateproduct(product instance);
    partial void Deleteproduct(product instance);
    partial void InsertUserCart(UserCart instance);
    partial void UpdateUserCart(UserCart instance);
    partial void DeleteUserCart(UserCart instance);
    partial void Insertorder(order instance);
    partial void Updateorder(order instance);
    partial void Deleteorder(order instance);
    #endregion
		
		public DBContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SrProjConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<optiongroup> optiongroups
		{
			get
			{
				return this.GetTable<optiongroup>();
			}
		}
		
		public System.Data.Linq.Table<option> options
		{
			get
			{
				return this.GetTable<option>();
			}
		}
		
		public System.Data.Linq.Table<productcategory> productcategories
		{
			get
			{
				return this.GetTable<productcategory>();
			}
		}
		
		public System.Data.Linq.Table<productoption> productoptions
		{
			get
			{
				return this.GetTable<productoption>();
			}
		}
		
		public System.Data.Linq.Table<product> products
		{
			get
			{
				return this.GetTable<product>();
			}
		}
		
		public System.Data.Linq.Table<UserCart> UserCarts
		{
			get
			{
				return this.GetTable<UserCart>();
			}
		}
		
		public System.Data.Linq.Table<order> orders
		{
			get
			{
				return this.GetTable<order>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserEmail;
		
		private string _UserPassword;
		
		private string _UserSalt;
		
		private string _UserFirstName;
		
		private string _UserLastName;
		
		private string _UserAddress1;
		
		private string _UserAddress2;
		
		private string _UserCity;
		
		private string _UserState;
		
		private string _UserZip;
		
		private System.Nullable<bool> _UserEmailVerified;
		
		private System.Nullable<bool> _UserIsAdmin;
		
		private string _UserPhone;
		
		private EntitySet<UserCart> _UserCarts;
		
		private EntitySet<order> _orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserSaltChanging(string value);
    partial void OnUserSaltChanged();
    partial void OnUserFirstNameChanging(string value);
    partial void OnUserFirstNameChanged();
    partial void OnUserLastNameChanging(string value);
    partial void OnUserLastNameChanged();
    partial void OnUserAddress1Changing(string value);
    partial void OnUserAddress1Changed();
    partial void OnUserAddress2Changing(string value);
    partial void OnUserAddress2Changed();
    partial void OnUserCityChanging(string value);
    partial void OnUserCityChanged();
    partial void OnUserStateChanging(string value);
    partial void OnUserStateChanged();
    partial void OnUserZipChanging(string value);
    partial void OnUserZipChanged();
    partial void OnUserEmailVerifiedChanging(System.Nullable<bool> value);
    partial void OnUserEmailVerifiedChanged();
    partial void OnUserIsAdminChanging(System.Nullable<bool> value);
    partial void OnUserIsAdminChanged();
    partial void OnUserPhoneChanging(string value);
    partial void OnUserPhoneChanged();
    #endregion
		
		public user()
		{
			this._UserCarts = new EntitySet<UserCart>(new Action<UserCart>(this.attach_UserCarts), new Action<UserCart>(this.detach_UserCarts));
			this._orders = new EntitySet<order>(new Action<order>(this.attach_orders), new Action<order>(this.detach_orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSalt", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserSalt
		{
			get
			{
				return this._UserSalt;
			}
			set
			{
				if ((this._UserSalt != value))
				{
					this.OnUserSaltChanging(value);
					this.SendPropertyChanging();
					this._UserSalt = value;
					this.SendPropertyChanged("UserSalt");
					this.OnUserSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFirstName", DbType="VarChar(100)")]
		public string UserFirstName
		{
			get
			{
				return this._UserFirstName;
			}
			set
			{
				if ((this._UserFirstName != value))
				{
					this.OnUserFirstNameChanging(value);
					this.SendPropertyChanging();
					this._UserFirstName = value;
					this.SendPropertyChanged("UserFirstName");
					this.OnUserFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastName", DbType="VarChar(100)")]
		public string UserLastName
		{
			get
			{
				return this._UserLastName;
			}
			set
			{
				if ((this._UserLastName != value))
				{
					this.OnUserLastNameChanging(value);
					this.SendPropertyChanging();
					this._UserLastName = value;
					this.SendPropertyChanged("UserLastName");
					this.OnUserLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress1", DbType="VarChar(100)")]
		public string UserAddress1
		{
			get
			{
				return this._UserAddress1;
			}
			set
			{
				if ((this._UserAddress1 != value))
				{
					this.OnUserAddress1Changing(value);
					this.SendPropertyChanging();
					this._UserAddress1 = value;
					this.SendPropertyChanged("UserAddress1");
					this.OnUserAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress2", DbType="VarChar(100)")]
		public string UserAddress2
		{
			get
			{
				return this._UserAddress2;
			}
			set
			{
				if ((this._UserAddress2 != value))
				{
					this.OnUserAddress2Changing(value);
					this.SendPropertyChanging();
					this._UserAddress2 = value;
					this.SendPropertyChanged("UserAddress2");
					this.OnUserAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCity", DbType="VarChar(50)")]
		public string UserCity
		{
			get
			{
				return this._UserCity;
			}
			set
			{
				if ((this._UserCity != value))
				{
					this.OnUserCityChanging(value);
					this.SendPropertyChanging();
					this._UserCity = value;
					this.SendPropertyChanged("UserCity");
					this.OnUserCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserState", DbType="VarChar(50)")]
		public string UserState
		{
			get
			{
				return this._UserState;
			}
			set
			{
				if ((this._UserState != value))
				{
					this.OnUserStateChanging(value);
					this.SendPropertyChanging();
					this._UserState = value;
					this.SendPropertyChanged("UserState");
					this.OnUserStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserZip", DbType="VarChar(10)")]
		public string UserZip
		{
			get
			{
				return this._UserZip;
			}
			set
			{
				if ((this._UserZip != value))
				{
					this.OnUserZipChanging(value);
					this.SendPropertyChanging();
					this._UserZip = value;
					this.SendPropertyChanged("UserZip");
					this.OnUserZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmailVerified", DbType="Bit")]
		public System.Nullable<bool> UserEmailVerified
		{
			get
			{
				return this._UserEmailVerified;
			}
			set
			{
				if ((this._UserEmailVerified != value))
				{
					this.OnUserEmailVerifiedChanging(value);
					this.SendPropertyChanging();
					this._UserEmailVerified = value;
					this.SendPropertyChanged("UserEmailVerified");
					this.OnUserEmailVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIsAdmin", DbType="Bit")]
		public System.Nullable<bool> UserIsAdmin
		{
			get
			{
				return this._UserIsAdmin;
			}
			set
			{
				if ((this._UserIsAdmin != value))
				{
					this.OnUserIsAdminChanging(value);
					this.SendPropertyChanging();
					this._UserIsAdmin = value;
					this.SendPropertyChanged("UserIsAdmin");
					this.OnUserIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhone", DbType="VarChar(20)")]
		public string UserPhone
		{
			get
			{
				return this._UserPhone;
			}
			set
			{
				if ((this._UserPhone != value))
				{
					this.OnUserPhoneChanging(value);
					this.SendPropertyChanging();
					this._UserPhone = value;
					this.SendPropertyChanged("UserPhone");
					this.OnUserPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_UserCart", Storage="_UserCarts", ThisKey="UserID", OtherKey="CartUserID")]
		public EntitySet<UserCart> UserCarts
		{
			get
			{
				return this._UserCarts;
			}
			set
			{
				this._UserCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_order", Storage="_orders", ThisKey="UserID", OtherKey="OrderUserID")]
		public EntitySet<order> orders
		{
			get
			{
				return this._orders;
			}
			set
			{
				this._orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_orders(order entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_orders(order entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.optiongroups")]
	public partial class optiongroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OptionGroupID;
		
		private string _OptionGroupName;
		
		private EntitySet<productoption> _productoptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOptionGroupIDChanging(int value);
    partial void OnOptionGroupIDChanged();
    partial void OnOptionGroupNameChanging(string value);
    partial void OnOptionGroupNameChanged();
    #endregion
		
		public optiongroup()
		{
			this._productoptions = new EntitySet<productoption>(new Action<productoption>(this.attach_productoptions), new Action<productoption>(this.detach_productoptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OptionGroupID
		{
			get
			{
				return this._OptionGroupID;
			}
			set
			{
				if ((this._OptionGroupID != value))
				{
					this.OnOptionGroupIDChanging(value);
					this.SendPropertyChanging();
					this._OptionGroupID = value;
					this.SendPropertyChanged("OptionGroupID");
					this.OnOptionGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionGroupName", DbType="VarChar(50)")]
		public string OptionGroupName
		{
			get
			{
				return this._OptionGroupName;
			}
			set
			{
				if ((this._OptionGroupName != value))
				{
					this.OnOptionGroupNameChanging(value);
					this.SendPropertyChanging();
					this._OptionGroupName = value;
					this.SendPropertyChanged("OptionGroupName");
					this.OnOptionGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="optiongroup_productoption", Storage="_productoptions", ThisKey="OptionGroupID", OtherKey="OptionGroupID")]
		public EntitySet<productoption> productoptions
		{
			get
			{
				return this._productoptions;
			}
			set
			{
				this._productoptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_productoptions(productoption entity)
		{
			this.SendPropertyChanging();
			entity.optiongroup = this;
		}
		
		private void detach_productoptions(productoption entity)
		{
			this.SendPropertyChanging();
			entity.optiongroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.options")]
	public partial class option : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OptionID;
		
		private string _OptionName;
		
		private EntitySet<productoption> _productoptions;
		
		private EntitySet<UserCart> _UserCarts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOptionIDChanging(int value);
    partial void OnOptionIDChanged();
    partial void OnOptionNameChanging(string value);
    partial void OnOptionNameChanged();
    #endregion
		
		public option()
		{
			this._productoptions = new EntitySet<productoption>(new Action<productoption>(this.attach_productoptions), new Action<productoption>(this.detach_productoptions));
			this._UserCarts = new EntitySet<UserCart>(new Action<UserCart>(this.attach_UserCarts), new Action<UserCart>(this.detach_UserCarts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OptionID
		{
			get
			{
				return this._OptionID;
			}
			set
			{
				if ((this._OptionID != value))
				{
					this.OnOptionIDChanging(value);
					this.SendPropertyChanging();
					this._OptionID = value;
					this.SendPropertyChanged("OptionID");
					this.OnOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionName", DbType="VarChar(50)")]
		public string OptionName
		{
			get
			{
				return this._OptionName;
			}
			set
			{
				if ((this._OptionName != value))
				{
					this.OnOptionNameChanging(value);
					this.SendPropertyChanging();
					this._OptionName = value;
					this.SendPropertyChanged("OptionName");
					this.OnOptionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="option_productoption", Storage="_productoptions", ThisKey="OptionID", OtherKey="OptionID")]
		public EntitySet<productoption> productoptions
		{
			get
			{
				return this._productoptions;
			}
			set
			{
				this._productoptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="option_UserCart", Storage="_UserCarts", ThisKey="OptionID", OtherKey="CartOptionID")]
		public EntitySet<UserCart> UserCarts
		{
			get
			{
				return this._UserCarts;
			}
			set
			{
				this._UserCarts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_productoptions(productoption entity)
		{
			this.SendPropertyChanging();
			entity.option = this;
		}
		
		private void detach_productoptions(productoption entity)
		{
			this.SendPropertyChanging();
			entity.option = null;
		}
		
		private void attach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.option = this;
		}
		
		private void detach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.option = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.productcategories")]
	public partial class productcategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategroyID;
		
		private string _CategoryName;
		
		private EntitySet<product> _products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategroyIDChanging(int value);
    partial void OnCategroyIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public productcategory()
		{
			this._products = new EntitySet<product>(new Action<product>(this.attach_products), new Action<product>(this.detach_products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategroyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategroyID
		{
			get
			{
				return this._CategroyID;
			}
			set
			{
				if ((this._CategroyID != value))
				{
					this.OnCategroyIDChanging(value);
					this.SendPropertyChanging();
					this._CategroyID = value;
					this.SendPropertyChanged("CategroyID");
					this.OnCategroyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productcategory_product", Storage="_products", ThisKey="CategroyID", OtherKey="ProductCategoryID")]
		public EntitySet<product> products
		{
			get
			{
				return this._products;
			}
			set
			{
				this._products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_products(product entity)
		{
			this.SendPropertyChanging();
			entity.productcategory = this;
		}
		
		private void detach_products(product entity)
		{
			this.SendPropertyChanging();
			entity.productcategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.productoptions")]
	public partial class productoption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductOptionID;
		
		private int _OptionID;
		
		private int _ProductID;
		
		private int _OptionGroupID;
		
		private System.Nullable<double> _OptionPriceIncrement;
		
		private EntityRef<optiongroup> _optiongroup;
		
		private EntityRef<option> _option;
		
		private EntityRef<product> _product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductOptionIDChanging(int value);
    partial void OnProductOptionIDChanged();
    partial void OnOptionIDChanging(int value);
    partial void OnOptionIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnOptionGroupIDChanging(int value);
    partial void OnOptionGroupIDChanged();
    partial void OnOptionPriceIncrementChanging(System.Nullable<double> value);
    partial void OnOptionPriceIncrementChanged();
    #endregion
		
		public productoption()
		{
			this._optiongroup = default(EntityRef<optiongroup>);
			this._option = default(EntityRef<option>);
			this._product = default(EntityRef<product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductOptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductOptionID
		{
			get
			{
				return this._ProductOptionID;
			}
			set
			{
				if ((this._ProductOptionID != value))
				{
					this.OnProductOptionIDChanging(value);
					this.SendPropertyChanging();
					this._ProductOptionID = value;
					this.SendPropertyChanged("ProductOptionID");
					this.OnProductOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionID", DbType="Int NOT NULL")]
		public int OptionID
		{
			get
			{
				return this._OptionID;
			}
			set
			{
				if ((this._OptionID != value))
				{
					if (this._option.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOptionIDChanging(value);
					this.SendPropertyChanging();
					this._OptionID = value;
					this.SendPropertyChanged("OptionID");
					this.OnOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionGroupID", DbType="Int NOT NULL")]
		public int OptionGroupID
		{
			get
			{
				return this._OptionGroupID;
			}
			set
			{
				if ((this._OptionGroupID != value))
				{
					if (this._optiongroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOptionGroupIDChanging(value);
					this.SendPropertyChanging();
					this._OptionGroupID = value;
					this.SendPropertyChanged("OptionGroupID");
					this.OnOptionGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionPriceIncrement", DbType="Float")]
		public System.Nullable<double> OptionPriceIncrement
		{
			get
			{
				return this._OptionPriceIncrement;
			}
			set
			{
				if ((this._OptionPriceIncrement != value))
				{
					this.OnOptionPriceIncrementChanging(value);
					this.SendPropertyChanging();
					this._OptionPriceIncrement = value;
					this.SendPropertyChanged("OptionPriceIncrement");
					this.OnOptionPriceIncrementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="optiongroup_productoption", Storage="_optiongroup", ThisKey="OptionGroupID", OtherKey="OptionGroupID", IsForeignKey=true)]
		public optiongroup optiongroup
		{
			get
			{
				return this._optiongroup.Entity;
			}
			set
			{
				optiongroup previousValue = this._optiongroup.Entity;
				if (((previousValue != value) 
							|| (this._optiongroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._optiongroup.Entity = null;
						previousValue.productoptions.Remove(this);
					}
					this._optiongroup.Entity = value;
					if ((value != null))
					{
						value.productoptions.Add(this);
						this._OptionGroupID = value.OptionGroupID;
					}
					else
					{
						this._OptionGroupID = default(int);
					}
					this.SendPropertyChanged("optiongroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="option_productoption", Storage="_option", ThisKey="OptionID", OtherKey="OptionID", IsForeignKey=true)]
		public option option
		{
			get
			{
				return this._option.Entity;
			}
			set
			{
				option previousValue = this._option.Entity;
				if (((previousValue != value) 
							|| (this._option.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._option.Entity = null;
						previousValue.productoptions.Remove(this);
					}
					this._option.Entity = value;
					if ((value != null))
					{
						value.productoptions.Add(this);
						this._OptionID = value.OptionID;
					}
					else
					{
						this._OptionID = default(int);
					}
					this.SendPropertyChanged("option");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="product_productoption", Storage="_product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public product product
		{
			get
			{
				return this._product.Entity;
			}
			set
			{
				product previousValue = this._product.Entity;
				if (((previousValue != value) 
							|| (this._product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._product.Entity = null;
						previousValue.productoptions.Remove(this);
					}
					this._product.Entity = value;
					if ((value != null))
					{
						value.productoptions.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.products")]
	public partial class product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ProductName;
		
		private double _ProductPrice;
		
		private double _ProductWeight;
		
		private string _ProductCartDesc;
		
		private string _ProductShortDesc;
		
		private string _ProductLongDesc;
		
		private string _ProductThumb;
		
		private string _ProductImage;
		
		private string _ProductHeat;
		
		private int _ProductCategoryID;
		
		private System.Data.Linq.Binary _ProductUpdateDate;
		
		private System.Nullable<double> _ProductStock;
		
		private bool _ProductLive;
		
		private EntitySet<productoption> _productoptions;
		
		private EntitySet<UserCart> _UserCarts;
		
		private EntityRef<productcategory> _productcategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductPriceChanging(double value);
    partial void OnProductPriceChanged();
    partial void OnProductWeightChanging(double value);
    partial void OnProductWeightChanged();
    partial void OnProductCartDescChanging(string value);
    partial void OnProductCartDescChanged();
    partial void OnProductShortDescChanging(string value);
    partial void OnProductShortDescChanged();
    partial void OnProductLongDescChanging(string value);
    partial void OnProductLongDescChanged();
    partial void OnProductThumbChanging(string value);
    partial void OnProductThumbChanged();
    partial void OnProductImageChanging(string value);
    partial void OnProductImageChanged();
    partial void OnProductHeatChanging(string value);
    partial void OnProductHeatChanged();
    partial void OnProductCategoryIDChanging(int value);
    partial void OnProductCategoryIDChanged();
    partial void OnProductUpdateDateChanging(System.Data.Linq.Binary value);
    partial void OnProductUpdateDateChanged();
    partial void OnProductStockChanging(System.Nullable<double> value);
    partial void OnProductStockChanged();
    partial void OnProductLiveChanging(bool value);
    partial void OnProductLiveChanged();
    #endregion
		
		public product()
		{
			this._productoptions = new EntitySet<productoption>(new Action<productoption>(this.attach_productoptions), new Action<productoption>(this.detach_productoptions));
			this._UserCarts = new EntitySet<UserCart>(new Action<UserCart>(this.attach_UserCarts), new Action<UserCart>(this.detach_UserCarts));
			this._productcategory = default(EntityRef<productcategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductPrice", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double ProductPrice
		{
			get
			{
				return this._ProductPrice;
			}
			set
			{
				if ((this._ProductPrice != value))
				{
					this.OnProductPriceChanging(value);
					this.SendPropertyChanging();
					this._ProductPrice = value;
					this.SendPropertyChanged("ProductPrice");
					this.OnProductPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductWeight", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double ProductWeight
		{
			get
			{
				return this._ProductWeight;
			}
			set
			{
				if ((this._ProductWeight != value))
				{
					this.OnProductWeightChanging(value);
					this.SendPropertyChanging();
					this._ProductWeight = value;
					this.SendPropertyChanged("ProductWeight");
					this.OnProductWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCartDesc", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProductCartDesc
		{
			get
			{
				return this._ProductCartDesc;
			}
			set
			{
				if ((this._ProductCartDesc != value))
				{
					this.OnProductCartDescChanging(value);
					this.SendPropertyChanging();
					this._ProductCartDesc = value;
					this.SendPropertyChanged("ProductCartDesc");
					this.OnProductCartDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductShortDesc", DbType="VarChar(1000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProductShortDesc
		{
			get
			{
				return this._ProductShortDesc;
			}
			set
			{
				if ((this._ProductShortDesc != value))
				{
					this.OnProductShortDescChanging(value);
					this.SendPropertyChanging();
					this._ProductShortDesc = value;
					this.SendPropertyChanged("ProductShortDesc");
					this.OnProductShortDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductLongDesc", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProductLongDesc
		{
			get
			{
				return this._ProductLongDesc;
			}
			set
			{
				if ((this._ProductLongDesc != value))
				{
					this.OnProductLongDescChanging(value);
					this.SendPropertyChanging();
					this._ProductLongDesc = value;
					this.SendPropertyChanged("ProductLongDesc");
					this.OnProductLongDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductThumb", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProductThumb
		{
			get
			{
				return this._ProductThumb;
			}
			set
			{
				if ((this._ProductThumb != value))
				{
					this.OnProductThumbChanging(value);
					this.SendPropertyChanging();
					this._ProductThumb = value;
					this.SendPropertyChanged("ProductThumb");
					this.OnProductThumbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductImage", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProductImage
		{
			get
			{
				return this._ProductImage;
			}
			set
			{
				if ((this._ProductImage != value))
				{
					this.OnProductImageChanging(value);
					this.SendPropertyChanging();
					this._ProductImage = value;
					this.SendPropertyChanged("ProductImage");
					this.OnProductImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductHeat", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string ProductHeat
		{
			get
			{
				return this._ProductHeat;
			}
			set
			{
				if ((this._ProductHeat != value))
				{
					this.OnProductHeatChanging(value);
					this.SendPropertyChanging();
					this._ProductHeat = value;
					this.SendPropertyChanged("ProductHeat");
					this.OnProductHeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategoryID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProductCategoryID
		{
			get
			{
				return this._ProductCategoryID;
			}
			set
			{
				if ((this._ProductCategoryID != value))
				{
					if (this._productcategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryID = value;
					this.SendPropertyChanged("ProductCategoryID");
					this.OnProductCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductUpdateDate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ProductUpdateDate
		{
			get
			{
				return this._ProductUpdateDate;
			}
			set
			{
				if ((this._ProductUpdateDate != value))
				{
					this.OnProductUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._ProductUpdateDate = value;
					this.SendPropertyChanged("ProductUpdateDate");
					this.OnProductUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductStock", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ProductStock
		{
			get
			{
				return this._ProductStock;
			}
			set
			{
				if ((this._ProductStock != value))
				{
					this.OnProductStockChanging(value);
					this.SendPropertyChanging();
					this._ProductStock = value;
					this.SendPropertyChanged("ProductStock");
					this.OnProductStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductLive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ProductLive
		{
			get
			{
				return this._ProductLive;
			}
			set
			{
				if ((this._ProductLive != value))
				{
					this.OnProductLiveChanging(value);
					this.SendPropertyChanging();
					this._ProductLive = value;
					this.SendPropertyChanged("ProductLive");
					this.OnProductLiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="product_productoption", Storage="_productoptions", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<productoption> productoptions
		{
			get
			{
				return this._productoptions;
			}
			set
			{
				this._productoptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="product_UserCart", Storage="_UserCarts", ThisKey="ProductID", OtherKey="CartProductID")]
		public EntitySet<UserCart> UserCarts
		{
			get
			{
				return this._UserCarts;
			}
			set
			{
				this._UserCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="productcategory_product", Storage="_productcategory", ThisKey="ProductCategoryID", OtherKey="CategroyID", IsForeignKey=true)]
		public productcategory productcategory
		{
			get
			{
				return this._productcategory.Entity;
			}
			set
			{
				productcategory previousValue = this._productcategory.Entity;
				if (((previousValue != value) 
							|| (this._productcategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._productcategory.Entity = null;
						previousValue.products.Remove(this);
					}
					this._productcategory.Entity = value;
					if ((value != null))
					{
						value.products.Add(this);
						this._ProductCategoryID = value.CategroyID;
					}
					else
					{
						this._ProductCategoryID = default(int);
					}
					this.SendPropertyChanged("productcategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_productoptions(productoption entity)
		{
			this.SendPropertyChanging();
			entity.product = this;
		}
		
		private void detach_productoptions(productoption entity)
		{
			this.SendPropertyChanging();
			entity.product = null;
		}
		
		private void attach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.product = this;
		}
		
		private void detach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCart")]
	public partial class UserCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CartID;
		
		private System.Nullable<int> _CartOrderID;
		
		private int _CartProductID;
		
		private int _CartUserID;
		
		private System.Nullable<int> _CartOptionID;
		
		private string _CartName;
		
		private double _CartPrice;
		
		private int _CartQuantity;
		
		private EntityRef<option> _option;
		
		private EntityRef<product> _product;
		
		private EntityRef<user> _user;
		
		private EntityRef<order> _order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCartIDChanging(int value);
    partial void OnCartIDChanged();
    partial void OnCartOrderIDChanging(System.Nullable<int> value);
    partial void OnCartOrderIDChanged();
    partial void OnCartProductIDChanging(int value);
    partial void OnCartProductIDChanged();
    partial void OnCartUserIDChanging(int value);
    partial void OnCartUserIDChanged();
    partial void OnCartOptionIDChanging(System.Nullable<int> value);
    partial void OnCartOptionIDChanged();
    partial void OnCartNameChanging(string value);
    partial void OnCartNameChanged();
    partial void OnCartPriceChanging(double value);
    partial void OnCartPriceChanged();
    partial void OnCartQuantityChanging(int value);
    partial void OnCartQuantityChanged();
    #endregion
		
		public UserCart()
		{
			this._option = default(EntityRef<option>);
			this._product = default(EntityRef<product>);
			this._user = default(EntityRef<user>);
			this._order = default(EntityRef<order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartOrderID", DbType="Int")]
		public System.Nullable<int> CartOrderID
		{
			get
			{
				return this._CartOrderID;
			}
			set
			{
				if ((this._CartOrderID != value))
				{
					if (this._order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartOrderIDChanging(value);
					this.SendPropertyChanging();
					this._CartOrderID = value;
					this.SendPropertyChanged("CartOrderID");
					this.OnCartOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartProductID", DbType="Int NOT NULL")]
		public int CartProductID
		{
			get
			{
				return this._CartProductID;
			}
			set
			{
				if ((this._CartProductID != value))
				{
					if (this._product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartProductIDChanging(value);
					this.SendPropertyChanging();
					this._CartProductID = value;
					this.SendPropertyChanged("CartProductID");
					this.OnCartProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartUserID", DbType="Int NOT NULL")]
		public int CartUserID
		{
			get
			{
				return this._CartUserID;
			}
			set
			{
				if ((this._CartUserID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartUserIDChanging(value);
					this.SendPropertyChanging();
					this._CartUserID = value;
					this.SendPropertyChanged("CartUserID");
					this.OnCartUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartOptionID", DbType="Int")]
		public System.Nullable<int> CartOptionID
		{
			get
			{
				return this._CartOptionID;
			}
			set
			{
				if ((this._CartOptionID != value))
				{
					if (this._option.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartOptionIDChanging(value);
					this.SendPropertyChanging();
					this._CartOptionID = value;
					this.SendPropertyChanged("CartOptionID");
					this.OnCartOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string CartName
		{
			get
			{
				return this._CartName;
			}
			set
			{
				if ((this._CartName != value))
				{
					this.OnCartNameChanging(value);
					this.SendPropertyChanging();
					this._CartName = value;
					this.SendPropertyChanged("CartName");
					this.OnCartNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartPrice", DbType="Float NOT NULL")]
		public double CartPrice
		{
			get
			{
				return this._CartPrice;
			}
			set
			{
				if ((this._CartPrice != value))
				{
					this.OnCartPriceChanging(value);
					this.SendPropertyChanging();
					this._CartPrice = value;
					this.SendPropertyChanged("CartPrice");
					this.OnCartPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartQuantity", DbType="Int NOT NULL")]
		public int CartQuantity
		{
			get
			{
				return this._CartQuantity;
			}
			set
			{
				if ((this._CartQuantity != value))
				{
					this.OnCartQuantityChanging(value);
					this.SendPropertyChanging();
					this._CartQuantity = value;
					this.SendPropertyChanged("CartQuantity");
					this.OnCartQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="option_UserCart", Storage="_option", ThisKey="CartOptionID", OtherKey="OptionID", IsForeignKey=true)]
		public option option
		{
			get
			{
				return this._option.Entity;
			}
			set
			{
				option previousValue = this._option.Entity;
				if (((previousValue != value) 
							|| (this._option.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._option.Entity = null;
						previousValue.UserCarts.Remove(this);
					}
					this._option.Entity = value;
					if ((value != null))
					{
						value.UserCarts.Add(this);
						this._CartOptionID = value.OptionID;
					}
					else
					{
						this._CartOptionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("option");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="product_UserCart", Storage="_product", ThisKey="CartProductID", OtherKey="ProductID", IsForeignKey=true)]
		public product product
		{
			get
			{
				return this._product.Entity;
			}
			set
			{
				product previousValue = this._product.Entity;
				if (((previousValue != value) 
							|| (this._product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._product.Entity = null;
						previousValue.UserCarts.Remove(this);
					}
					this._product.Entity = value;
					if ((value != null))
					{
						value.UserCarts.Add(this);
						this._CartProductID = value.ProductID;
					}
					else
					{
						this._CartProductID = default(int);
					}
					this.SendPropertyChanged("product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_UserCart", Storage="_user", ThisKey="CartUserID", OtherKey="UserID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.UserCarts.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.UserCarts.Add(this);
						this._CartUserID = value.UserID;
					}
					else
					{
						this._CartUserID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="order_UserCart", Storage="_order", ThisKey="CartOrderID", OtherKey="OrderID", IsForeignKey=true)]
		public order order
		{
			get
			{
				return this._order.Entity;
			}
			set
			{
				order previousValue = this._order.Entity;
				if (((previousValue != value) 
							|| (this._order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._order.Entity = null;
						previousValue.UserCarts.Remove(this);
					}
					this._order.Entity = value;
					if ((value != null))
					{
						value.UserCarts.Add(this);
						this._CartOrderID = value.OrderID;
					}
					else
					{
						this._CartOrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.orders")]
	public partial class order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _OrderUserID;
		
		private System.Nullable<double> _OrderAmount;
		
		private string _OrderShipName;
		
		private string _OrderShipAddress;
		
		private string _OrderShipAddress2;
		
		private string _OrderCity;
		
		private string _OrderState;
		
		private string _OrderZip;
		
		private string _OrderPhone;
		
		private System.Nullable<double> _OrderShipping;
		
		private System.Nullable<double> _OrderTax;
		
		private string _OrderEmail;
		
		private System.DateTime _OrderDate;
		
		private bool _OrderShipped;
		
		private string _OrderTrackingNumber;
		
		private EntitySet<UserCart> _UserCarts;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderUserIDChanging(int value);
    partial void OnOrderUserIDChanged();
    partial void OnOrderAmountChanging(System.Nullable<double> value);
    partial void OnOrderAmountChanged();
    partial void OnOrderShipNameChanging(string value);
    partial void OnOrderShipNameChanged();
    partial void OnOrderShipAddressChanging(string value);
    partial void OnOrderShipAddressChanged();
    partial void OnOrderShipAddress2Changing(string value);
    partial void OnOrderShipAddress2Changed();
    partial void OnOrderCityChanging(string value);
    partial void OnOrderCityChanged();
    partial void OnOrderStateChanging(string value);
    partial void OnOrderStateChanged();
    partial void OnOrderZipChanging(string value);
    partial void OnOrderZipChanged();
    partial void OnOrderPhoneChanging(string value);
    partial void OnOrderPhoneChanged();
    partial void OnOrderShippingChanging(System.Nullable<double> value);
    partial void OnOrderShippingChanged();
    partial void OnOrderTaxChanging(System.Nullable<double> value);
    partial void OnOrderTaxChanged();
    partial void OnOrderEmailChanging(string value);
    partial void OnOrderEmailChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnOrderShippedChanging(bool value);
    partial void OnOrderShippedChanged();
    partial void OnOrderTrackingNumberChanging(string value);
    partial void OnOrderTrackingNumberChanged();
    #endregion
		
		public order()
		{
			this._UserCarts = new EntitySet<UserCart>(new Action<UserCart>(this.attach_UserCarts), new Action<UserCart>(this.detach_UserCarts));
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderUserID", DbType="Int NOT NULL")]
		public int OrderUserID
		{
			get
			{
				return this._OrderUserID;
			}
			set
			{
				if ((this._OrderUserID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderUserIDChanging(value);
					this.SendPropertyChanging();
					this._OrderUserID = value;
					this.SendPropertyChanged("OrderUserID");
					this.OnOrderUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderAmount", DbType="Float")]
		public System.Nullable<double> OrderAmount
		{
			get
			{
				return this._OrderAmount;
			}
			set
			{
				if ((this._OrderAmount != value))
				{
					this.OnOrderAmountChanging(value);
					this.SendPropertyChanging();
					this._OrderAmount = value;
					this.SendPropertyChanged("OrderAmount");
					this.OnOrderAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderShipName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OrderShipName
		{
			get
			{
				return this._OrderShipName;
			}
			set
			{
				if ((this._OrderShipName != value))
				{
					this.OnOrderShipNameChanging(value);
					this.SendPropertyChanging();
					this._OrderShipName = value;
					this.SendPropertyChanged("OrderShipName");
					this.OnOrderShipNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderShipAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OrderShipAddress
		{
			get
			{
				return this._OrderShipAddress;
			}
			set
			{
				if ((this._OrderShipAddress != value))
				{
					this.OnOrderShipAddressChanging(value);
					this.SendPropertyChanging();
					this._OrderShipAddress = value;
					this.SendPropertyChanged("OrderShipAddress");
					this.OnOrderShipAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderShipAddress2", DbType="VarChar(100)")]
		public string OrderShipAddress2
		{
			get
			{
				return this._OrderShipAddress2;
			}
			set
			{
				if ((this._OrderShipAddress2 != value))
				{
					this.OnOrderShipAddress2Changing(value);
					this.SendPropertyChanging();
					this._OrderShipAddress2 = value;
					this.SendPropertyChanged("OrderShipAddress2");
					this.OnOrderShipAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderCity", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderCity
		{
			get
			{
				return this._OrderCity;
			}
			set
			{
				if ((this._OrderCity != value))
				{
					this.OnOrderCityChanging(value);
					this.SendPropertyChanging();
					this._OrderCity = value;
					this.SendPropertyChanged("OrderCity");
					this.OnOrderCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderState", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderState
		{
			get
			{
				return this._OrderState;
			}
			set
			{
				if ((this._OrderState != value))
				{
					this.OnOrderStateChanging(value);
					this.SendPropertyChanging();
					this._OrderState = value;
					this.SendPropertyChanged("OrderState");
					this.OnOrderStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderZip", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string OrderZip
		{
			get
			{
				return this._OrderZip;
			}
			set
			{
				if ((this._OrderZip != value))
				{
					this.OnOrderZipChanging(value);
					this.SendPropertyChanging();
					this._OrderZip = value;
					this.SendPropertyChanged("OrderZip");
					this.OnOrderZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderPhone", DbType="VarChar(20)")]
		public string OrderPhone
		{
			get
			{
				return this._OrderPhone;
			}
			set
			{
				if ((this._OrderPhone != value))
				{
					this.OnOrderPhoneChanging(value);
					this.SendPropertyChanging();
					this._OrderPhone = value;
					this.SendPropertyChanged("OrderPhone");
					this.OnOrderPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderShipping", DbType="Float")]
		public System.Nullable<double> OrderShipping
		{
			get
			{
				return this._OrderShipping;
			}
			set
			{
				if ((this._OrderShipping != value))
				{
					this.OnOrderShippingChanging(value);
					this.SendPropertyChanging();
					this._OrderShipping = value;
					this.SendPropertyChanged("OrderShipping");
					this.OnOrderShippingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTax", DbType="Float")]
		public System.Nullable<double> OrderTax
		{
			get
			{
				return this._OrderTax;
			}
			set
			{
				if ((this._OrderTax != value))
				{
					this.OnOrderTaxChanging(value);
					this.SendPropertyChanging();
					this._OrderTax = value;
					this.SendPropertyChanged("OrderTax");
					this.OnOrderTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderEmail", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OrderEmail
		{
			get
			{
				return this._OrderEmail;
			}
			set
			{
				if ((this._OrderEmail != value))
				{
					this.OnOrderEmailChanging(value);
					this.SendPropertyChanging();
					this._OrderEmail = value;
					this.SendPropertyChanged("OrderEmail");
					this.OnOrderEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderShipped", DbType="Bit NOT NULL")]
		public bool OrderShipped
		{
			get
			{
				return this._OrderShipped;
			}
			set
			{
				if ((this._OrderShipped != value))
				{
					this.OnOrderShippedChanging(value);
					this.SendPropertyChanging();
					this._OrderShipped = value;
					this.SendPropertyChanged("OrderShipped");
					this.OnOrderShippedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTrackingNumber", DbType="VarChar(80)")]
		public string OrderTrackingNumber
		{
			get
			{
				return this._OrderTrackingNumber;
			}
			set
			{
				if ((this._OrderTrackingNumber != value))
				{
					this.OnOrderTrackingNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderTrackingNumber = value;
					this.SendPropertyChanged("OrderTrackingNumber");
					this.OnOrderTrackingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="order_UserCart", Storage="_UserCarts", ThisKey="OrderID", OtherKey="CartOrderID")]
		public EntitySet<UserCart> UserCarts
		{
			get
			{
				return this._UserCarts;
			}
			set
			{
				this._UserCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_order", Storage="_user", ThisKey="OrderUserID", OtherKey="UserID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.orders.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.orders.Add(this);
						this._OrderUserID = value.UserID;
					}
					else
					{
						this._OrderUserID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.order = this;
		}
		
		private void detach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.order = null;
		}
	}
}
#pragma warning restore 1591
